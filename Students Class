import java.util.*;

import java.util.ArrayList;

public class Students {
    private ArrayList<Student> students;
    public Students(){
    }

    public ArrayList<Student> getStudents() {
        return students;
    }

    public void setStudents(ArrayList<Student> students) {
        this.students = students;
    }
    
    public void printStudent(int studentNumber) {
    	System.out.printf("-----------------%nStudent Number %d%n-----------------", studentNumber);
    	for(int i = 0; i < getStudents().get(studentNumber).getDays().size(); ++i) {
    		System.out.printf("%n-------------------%nDay %d%n-------------------%n", i+1);
	    	for(int j = 0; j < getStudents().get(studentNumber).getDays().get(i).dayData().length; j ++) {
	    		System.out.printf("%-12s|%-12.1f%n", getStudents().get(studentNumber).getDays().get(i).dayCategories()[j] , getStudents().get(studentNumber).getDays().get(i).dayData()[j]);
	    	}
    	}
    }
    
    public void printAllStudents() {
    	for(int i = 0; i < students.size(); i++) {
    		
    		printStudent(i);
    	}
    }
    
        
    public float maxCategory(int category) {
    	float maximum = Float.MIN_VALUE;
    	for(int i = 0; i < students.size(); i++) {
    		for(int j = 0; j < students.get(i).getDays().size(); j ++) {
    			if(students.get(i).getDays().get(j).dayData()[category] >= maximum) {
    				maximum = students.get(i).getDays().get(j).dayData()[category];
    			}
    		}	
    	}
    	return maximum;
    }
    public float minCategory(int category) {
    	float minimum = Float.MAX_VALUE;
    	for(int i = 0; i < students.size(); i++) {
    		for(int j = 0; j < students.get(i).getDays().size(); j ++) {
    			if(students.get(i).getDays().get(j).dayData()[category] <= minimum) {
    				minimum = students.get(i).getDays().get(j).dayData()[category];
    			}
    		}	
    	}
    	return minimum;
    }
    public float averageCategory(int category) {
    	float total = 0;
    	for(int i = 0; i < students.size(); i++) {
    		for(int j = 0; j < students.get(i).getDays().size(); j ++) {
    				total += students.get(i).getDays().get(j).dayData()[category];
    		}	
    	}
    	
    	return total/students.size()/students.get(0).getDays().size();
    }
    public float averageCategoryOneStudent(int category, int studentNumber) {
    	float total = 0;
    		for(int j = 0; j < students.get(studentNumber).getDays().size(); j ++) {
    				total += students.get(studentNumber).getDays().get(j).dayData()[category];
    		}	
    	return total/students.get(0).getDays().size();
    }
    
    public void mathChart() {
    	System.out.printf("%22s%20s%22s%n%s%n", "Min", "Max", "Avg", "-----------------------------------------------------------------");
    	for(int i = 0; i < students.get(0).getDays().get(0).dayData().length; i++) {
    		System.out.printf("%-12s%-5s%5.1f|%20.1f|%20.1f|%n", students.get(i).getDays().get(0).dayCategories()[i], " ", minCategory(i), maxCategory(i), averageCategory(i));
    	}
    }
    
    public void healthChart(int studentNumber) {
    	System.out.printf("%n----------------------------------%nHealth Check for Student Number %d%n----------------------------------%n", studentNumber);
    	int counter = 0;
    	for(int i = 0; i < students.get(studentNumber).getDays().get(0).dayData().length; i++) {
    		boolean healthy = true;
    		if(averageCategoryOneStudent(i, studentNumber) < students.get(studentNumber).getDays().get(0).healthyNum()[i]) {
    			healthy = false;
    		}
    		if(healthy) {
    			System.out.printf("%-12s|%-12s%n", students.get(i).getDays().get(0).dayCategories()[i], "Healthy");
    			counter+=1;
    		}
    		if(!healthy) {
    			System.out.printf("%-12s|%-12s%n", students.get(i).getDays().get(0).dayCategories()[i], "Unhealthy");
    		}
    		
    		
    	}	
    	System.out.printf("%n------------------------------------%nOverall Heath for Student %d: %d / 10%n------------------------------------%n", studentNumber, counter);
    }
    	
    
}
